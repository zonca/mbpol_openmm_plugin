#!/usr/bin/env python
from __future__ import print_function
import sys
import mbpol

try: # support for python 2
    from exceptions import IndexError, ImportError
except:
    pass

try:
    import configparser
except ImportError:
    import ConfigParser as configparser

template = """#!/usr/bin/env python
from __future__ import print_function

import mbpol
import os
import sys

import simtk.openmm as mm
from simtk import unit

try: # support for python 2
    from exceptions import ImportError
except:
    pass

simulation_name = "{SIMULATION_NAME}"
pdb = mm.app.PDBFile("{PDB_FILENAME}")
forcefield = mm.app.ForceField("{MBPOL_XML_LOCATION}")
nonbonded = mm.app.{NONBONDED}{PME_CONFIGURATION}

system = forcefield.createSystem(pdb.topology, nonbondedMethod=nonbonded, nonbondedCutoff=0.9*unit.nanometer, ewaldErrorTolerance={EWALD_ERROR_TOLERANCE})
temperature = float({TEMPERATURE})*unit.kelvin
{THERMOSTAT}{BAROSTAT}
integrator = mm.VerletIntegrator({TIMESTEP}*unit.femtoseconds)

platform = mm.Platform.getPlatformByName('Reference')
simulation = mm.app.Simulation(pdb.topology, system, integrator, platform)
simulation.context.setPositions(pdb.positions)
simulation.context.computeVirtualSites()

simulation_steps={SIMULATION_STEPS}
equilibration_steps={EQUILIBRATION_STEPS}

reporters = []{PDB_REPORTER}{STATE_DATA_REPORTER}
{LOCAL_MINIMIZATION}
{INTEGRATION}
"""
if len(sys.argv) < 2:
    print("mbpol_builder configuration_filename.ini script_filename.py")
    sys.exit(1)

## Read configuration
config_filename = sys.argv[1]
config = configparser.ConfigParser()
config.read(config_filename)

assert "system" in config.sections(), "ERROR: The configuration file needs a [system] section"

save_energy_every = config.getint("logging", "save_energy_every", fallback=0)
save_positions_every = config.getint("logging", "save_positions_every", fallback=0)

template = template.format(
    PDB_FILENAME=config["system"]["pdb_filename"],
    SIMULATION_NAME=config["system"]["simulation_name"],
    MBPOL_XML_LOCATION=mbpol.__file__.replace(".py", ".xml"),
    NONBONDED=config["system"]["nonbonded"],
    PME_CONFIGURATION="""
boxDim = float({})
boxSize = (boxDim, boxDim, boxDim) * unit.nanometer
pdb.topology.setUnitCellDimensions(boxSize)""".format(config["system"]["pme_box_size_nm"]) if (config["system"]["nonbonded"] == "PME") else "",
    EWALD_ERROR_TOLERANCE=config.getfloat("system", "ewald_error_tolerance", fallback=1e-8),
    TEMPERATURE=config["system"]["temperature_k"],
    THERMOSTAT="""
system.addForce(mm.AndersenThermostat(temperature, float({})/unit.picoseconds))""".format(config["thermostat"]["collision_rate_1overps"]) if ("thermostat" in config.keys()) else "",
    BAROSTAT="""
system.addForce(mm.MonteCarloBarostat(float({}) * unit.atmospheres, temperature,
        int({})))""".format(config["barostat"]["pressure_atm"], config["barostat"]["barostat_interval"]) if ("barostat" in config.keys()) else "",
    SIMULATION_STEPS=config.getint("integrator", "production_steps", fallback=0),
    EQUILIBRATION_STEPS=config.getint("integrator", "equilibration_steps", fallback=0),
    TIMESTEP=config.getfloat("integrator", "timestep_fs", fallback=1.),
    PDB_REPORTER="""
reporters.append(mm.app.PDBReporter(simulation_name + "_trajectory.pdb", {}))""".format(save_positions_every) if save_positions_every>0 else "",
    STATE_DATA_REPORTER="""
reporters.append(mm.app.StateDataReporter(simulation_name + ".log", {}, step=True,
        potentialEnergy=True, temperature=True, progress=True, remainingTime=True,
        speed=True, totalEnergy=True, volume=True, density=True, kineticEnergy=True,
        totalSteps=max(simulation_steps+equilibration_steps, 1), separator=','))""".format(save_energy_every) if save_energy_every>0 else "",
    LOCAL_MINIMIZATION="""
from simtk.openmm import LocalEnergyMinimizer
print("Running geometry optimization")
LocalEnergyMinimizer.minimize(simulation.context, 1e-1)""" if config.getboolean("system", "local_minimization", fallback=False) else "",
    INTEGRATION="""
print("Setting random velocities based on temperature")
simulation.context.setVelocitiesToTemperature(temperature)

# Add a `reporter` that prints out the simulation status every 10%
simulation.reporters.append(mm.app.StateDataReporter(sys.stdout, max(1, int((simulation_steps+equilibration_steps)/10)), step=True,
    progress=True, remainingTime=True,
    totalSteps=max(simulation_steps+equilibration_steps, 1), separator=','))

print("Running equilibration")
simulation.step(equilibration_steps)
print("Running simulation")

try:
    from chemistry.openmm.reporters import NetCDFReporter
    save_velocities_every = {SAVE_VELOCITIES_EVERY}
    if save_velocities_every > 0:
        reporters.append(NetCDFReporter(simulation_name + ".nc", save_velocities_every, crds=True, vels=True, frcs=True))
except ImportError:
    print("Saving velocities to file requires the ParmEd python package")

for r in reporters:
    simulation.reporters.append(r)

simulation.step(simulation_steps)""".format(
    SAVE_VELOCITIES_EVERY=config.getint("logging", "save_velocities_every", fallback=0)
            ) if config.has_section("integrator") else """print("Computing forces and energy")
state = simulation.context.getState(getForces=True, getEnergy=True, getPositions=True)

try:
    from chemistry.openmm.reporters import NetCDFReporter
    reporters.append(NetCDFReporter(simulation_name + ".nc", 1, crds=True, vels=False, frcs=True))
except ImportError:
    print("Saving forces to file requires the ParmEd python package")

for r in reporters:
    r.report(simulation, state)"""
)

try:
    with open(sys.argv[2], "w") as output_file:
        output_file.write(template)
except IndexError:
    print(template)
